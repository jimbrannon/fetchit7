<?php

/**
 * @file
 * Lets drupal 7 site builders create forms and graphs connected to remote databases.
 * 
 * Creates custom content storing the form, graph and database connection metadata,
 * then uses that metadata to create the "connected" forms and graphs as menu callbacks
 * 
 */
 
include_once(drupal_get_path('module', 'fetchit7').'/fetchit7.constants.inc');
 
 /**
  * Implementation of hook_menu
  */
function fetchit7_menu() {

	//=====================================================
	// first create all the static menu items
	//=====================================================

		$items['admin/config/fetchit7'] = array(
		'title' => 'fetchit7',
		'description' => 'fetchit7 options',
		'position' => 'right',
		'weight' => -5,
		'page callback' => 'system_admin_menu_block_page',
		'access arguments' => array('administer site configuration'),
		'file' => 'system.admin.inc',
		'file path' => drupal_get_path('module', 'system'),
	);

	$items['admin/config/fetchit7/settings'] = array(
		'title' => 'fetchit7 settings',
		'description' => 'Change how the fetchit7 module operates',
		'position' => 'right',
		'weight' => -5,
		'page callback' => 'drupal_get_form',
		'page arguments' => array('fetchit7_admin_settings'),
		'access arguments' => array('administer site configuration'),
		'type' => MENU_NORMAL_ITEM,
		'file' => 'fetchit7.admin.inc',
		'file path' => drupal_get_path('module', 'fetchit7'),
	);

	$items['admin/config/fetchit7/dbsettings'] = array(
		'title' => 'fetchit7 database default settings',
		'description' => 'These become the default database server connection settings for each node.',
		'position' => 'right',
		'weight' => -4,
		'page callback' => 'drupal_get_form',
		'page arguments' => array('fetchit7_admin_dbsettings'),
		'access arguments' => array('administer site configuration'),
		'type' => MENU_NORMAL_ITEM,
		'file' => 'fetchit7.admin.inc',
		'file path' => drupal_get_path('module', 'fetchit7'),
	);

	$items['admin/config/fetchit7/pagecontent'] = array(
		'title' => 'Preview fetchit7 page content',
		'description' => 'These are the fetchit7 content pages that have been created.',
		'position' => 'right',
		'weight' => -2,
		'page callback' => 'system_admin_menu_block_page',
		'access arguments' => array('administer site configuration'),
		'file' => 'system.admin.inc',
		'file path' => drupal_get_path('module', 'system'),
	);

	$items['admin/config/fetchit7/blockcontent'] = array(
		'title' => 'Preview fetchit7 block content',
		'description' => 'These are the fetchit7 content blocks that have been created.',
		'position' => 'right',
		'weight' => -1,
		'page callback' => 'system_admin_menu_block_page',
		'access arguments' => array('administer site configuration'),
		'file' => 'system.admin.inc',
		'file path' => drupal_get_path('module', 'system'),
	);

	$items['admin/config/fetchit7/backupcontent'] = array(
		'title' => 'Backup fetchit7 content',
		'description' => 'Exports all fetchit7 content to database tables (one per type).',
		'position' => 'right',
		'weight' => 1,
		'page callback' => 'drupal_get_form',
		'page arguments' => array('fetchit7_admin_backupcontent'),
		'access arguments' => array('administer site configuration'),
		'type' => MENU_NORMAL_ITEM,
		'file' => 'fetchit7.admin.inc',
		'file path' => drupal_get_path('module', 'fetchit7'),
	);

	$items['admin/config/fetchit7/restorecontent'] = array(
		'title' => 'Restore fetchit7 content',
		'description' => 'Imports fetchit7 content from database tables (one per type).',
		'position' => 'right',
		'weight' => 2,
		'page callback' => 'drupal_get_form',
		'page arguments' => array('fetchit7_admin_restorecontent'),
		'access arguments' => array('administer site configuration'),
		'type' => MENU_NORMAL_ITEM,
		'file' => 'fetchit7.admin.inc',
		'file path' => drupal_get_path('module', 'fetchit7'),
	);

	$items['admin/config/fetchit7/testform'] = array(
		'title'							=> 'fetchit7 content test',
		'description'				=> 'temporary menu item to allow testing fetchit7 forms content.',
		'position'					=> 'right',
		'weight'						=> 10,
		'page callback'			=> 'drupal_get_form',
		'page arguments'		=> array('fetchit7_table_form_13'),
		'access arguments'	=> array('administer site configuration'),
		'type'							=> MENU_NORMAL_ITEM,
		'file'							=> 'fetchit7.forms.inc',
		'file path'					=> drupal_get_path('module', 'fetchit7'),
	);
	
	//=====================================================
	// last create all the automated menu items
	// this is the "work" that keeps the site functional
	// these are based on fetchit7 content created
	//   by the site developer
	// note I am creating page and block content
	//   menu items on the admin/config/fetchit7 menu
	//   with an ID prefix (before the nid) of X (for eXample)
	// the normal IDs will have a prefix
	//   (before the nid) of I (for Implemented)
	//=====================================================
	// TODO: should I remove the old automatically created menu items first?  hmmm....
		// get all the nids for HTML table content in pages
	$query = new EntityFieldQuery();
	$query
		->entityCondition('entity_type', 'node')
		->entityCondition('bundle', 'fetchit7_content_table');
		//->propertyCondition('status', 1)
		//->propertyOrderBy('created', 'DESC');
	$query->fieldCondition('fetchit7_field_enabled', 'value', TRUE);
	$query->fieldCondition('fetchit7_field_location', 'value', 'page');
	//$query->range(0,10);
	$result = $query->execute();
	if (isset($result['node'])) {
		$nids = array_keys($result['node']);
		$menu_urlbase_example = 'admin/config/fetchit7/pagecontent/';
		// TODO: get the base URL for fetchit7_content_table page content
		$menu_urlbase_implemented = 'admin/config/fetchit7/pagecontent/'; //temporary
		foreach ($nids as $nid) {
			$formid = 'fetchit7_table_form_X' . $nid;
			$menu_url = $menu_urlbase_example . $formid;
			$items[$menu_url] = array(
				'title'							=> $formid,
				'description'				=> 'the content of fetchit7 form '.$formid,
				'position'					=> 'right',
				'weight'						=> 10 + $nid,
				'page callback'			=> 'drupal_get_form',
				'page arguments'		=> array($formid),
				'access arguments'	=> array('administer site configuration'),
				'type'							=> MENU_NORMAL_ITEM,
				'file'							=> 'fetchit7.forms.inc',
				'file path'					=> drupal_get_path('module', 'fetchit7'),
			);
			$formid = 'fetchit7_table_form_I' . $nid;
			$menu_url = $menu_urlbase_implemented . $formid;
			$items[$menu_url] = array(
				'title'							=> $formid,
				'description'				=> 'the content of fetchit7 form '.$formid,
				'position'					=> 'right',
				'weight'						=> 10 + $nid,
				'page callback'			=> 'drupal_get_form',
				'page arguments'		=> array($formid),
				// the implemented page should be viewable by anyone
				//'access arguments'	=> array('administer site configuration'),
				'type'							=> MENU_NORMAL_ITEM,
				'file'							=> 'fetchit7.forms.inc',
				'file path'					=> drupal_get_path('module', 'fetchit7'),
			);
		}
	}
	
	// get all the nids for HTML table content in blocks
	$query = new EntityFieldQuery();
	$query
		->entityCondition('entity_type', 'node')
		->entityCondition('bundle', 'fetchit7_content_table');
		//->propertyCondition('status', 1)
		//->propertyOrderBy('created', 'DESC');
	$query->fieldCondition('fetchit7_field_enabled', 'value', TRUE);
	$query->fieldCondition('fetchit7_field_location', 'value', 'block');
	//$query->range(0,10);
	$result = $query->execute();
	if (isset($result['node'])) {
		$nids = array_keys($result['node']);
		$menu_urlbase_example = 'admin/config/fetchit7/blockcontent/';
		$menu_urlbase_implemented = 'admin/config/fetchit7/blockcontent/'; //temporary
		foreach ($nids as $nid) {
			$formid = 'fetchit7_table_form_X' . $nid;
			$menu_url = $menu_urlbase_example . $formid;
			$items[$menu_url] = array(
				'title'							=> $formid,
				'description'				=> 'the content of fetchit7 form '.$formid,
				'position'					=> 'right',
				'weight'						=> 10 + $nid,
				'page callback'			=> 'drupal_get_form',
				'page arguments'		=> array($formid),
				'access arguments'	=> array('administer site configuration'),
				'type'							=> MENU_NORMAL_ITEM,
				'file'							=> 'fetchit7.forms.inc',
				'file path'					=> drupal_get_path('module', 'fetchit7'),
			);
			//
			//setting up the implemented block content is now handled in D7 by callbacks like
			//  hook_block_info() and hook_block_view() (not the hook_block of D6)
			//
			//$formid = 'fetchit7_table_form_I' . $nid;
			//$menu_url = $menu_urlbase_implemented . $formid;
			//$items[$menu_url] = array(
			//	'title'							=> $formid,
			//	'description'				=> 'the content of fetchit7 form '.$formid,
			//	'position'					=> 'right',
			//	'weight'						=> 10 + $nid,
			//	'page callback'			=> 'drupal_get_form',
			//	'page arguments'		=> array($formid),
			//	//'access arguments'	=> array('administer site configuration'),
			//	'type'							=> MENU_NORMAL_ITEM,
			//	'file'							=> 'fetchit7.forms.inc',
			//	'file path'					=> drupal_get_path('module', 'fetchit7'),
			//);
		}
	}
	
	return $items;
}


/**
 * Implement hook_block_info
 * 
 * note to self: this is a LOT like the "list" section of the old d6 hook_block function
 * 
 * so, get all the nids of content of each fetchit7 content type that are specifiied to
 * output to blocks (location = 'block').  create a unique delta for each one using the
 * nid of each one (which is guaranteed to be unique itself) to use as the key,
 * create an associative info array info array containing the info for each one,
 * and return it
 */
function fetchit7_block_info() {
	//=====================================================
	// create all the automated fetchit7 block items
	// this is the "work" that keeps the site functional
	// these are based on fetchit7 content created
	//   by the site developer
	// note that in the hook_menu (fetchit7_menu)
	//   I am creating page and block EXAMPLE content 
	//   menu items on the admin/config/fetchit7 menu
	//   with an ID prefix (before the nid) of X (for eXample)
	// the normal IDs will have a prefix
	//   (before the nid) of I (for Implemented)
	//=====================================================
	// get all the nids for enabled HTML table content to be displayed in blocks
	$query = new EntityFieldQuery();
	$query
		->entityCondition('entity_type', 'node')
		->entityCondition('bundle', 'fetchit7_content_table');
		//->propertyCondition('status', 1)
		//->propertyOrderBy('created', 'DESC');
	$query->fieldCondition('fetchit7_field_enabled', 'value', TRUE);
	$query->fieldCondition('fetchit7_field_location', 'value', 'block');
	//$query->range(0,10);
	$result = $query->execute();
	$blocks = array();
	if (isset($result['node'])) {
		$nids = array_keys($result['node']);
		//$menu_urlbase_example = 'admin/config/fetchit7/blockcontent/';
		//$menu_urlbase_implemented = 'admin/config/fetchit7/blockcontent/'; //temporary
		foreach ($nids as $nid) {
			//
			//setting up the example block content menu could be done here at the same time,
			//but for now is handled by hook_menu (fetchit7_menu)
			//
			//$formid = 'fetchit7_table_form_X' . $nid;
			//$menu_url = $menu_urlbase_example . $formid;
			//$items[$menu_url] = array(
			//	'title'							=> $formid,
			//	'description'				=> 'the content of fetchit7 form '.$formid,
			//	'position'					=> 'right',
			//	'weight'						=> 10 + $nid,
			//	'page callback'			=> 'drupal_get_form',
			//	'page arguments'		=> array($formid),
			//	'access arguments'	=> array('administer site configuration'),
			//	'type'							=> MENU_NORMAL_ITEM,
			//	'file'							=> 'fetchit7.forms.inc',
			//	'file path'					=> drupal_get_path('module', 'fetchit7'),
			//);
			$formid = 'fetchit7_table_form_I' . $nid;
			// TODO: convert d6 hook_block to d7 block functions (hook_block_info, etc.) and use fetchit7_XXXX_form_I$nid as the unique delta for the block schema where XXXX is the content short name (table, param, etc.)
			$blocks[$formid] = array(
				'info' => $formid,
				'cache' => DRUPAL_NO_CACHE,
			);
		}
	}
	
	return $blocks;
}

/**
 * Implement hook_node_insert
 * 
 * to call menu_rebuild?
 * we want to update the admin/config/fetchit7 menu if a new fetchit node is created :-)
 * 
 * no - actually a cache clear causes drupal 7 to fire hook_menu, which takes care of it, so...
 * TODO: tell site developers to clear cache after adding new fetchit7 content
 */

/**
 * Implement hook_block_view
 * 
 * note to self: this is a LOT like the "view" section of the old d6 hook_block function
 * 
 * conveniently, the delta is also a form name thanks to the design of hook_block_info above,
 * there is no form builder with this name, but thanks to hook_forms,
 * a generic form builder can take over the work
 * 
 *  a FOUR line block rendering function?
 *  do you KNOW how many lines this used to be in fetchit2?!
 *  what genius THINKS of this stuff?!
 *  (ouch, I just hurt my arm)
 * 
 * so just pass delta to drupal_get_form
 * (the user should know to be parsimonious with content in the body fields of forms sent to blocks)
 *
 * do not render the content - it will break the submit button (why? this took me hours to figure out)
 */
function fetchit7_block_view($delta = '') {
	include_once(drupal_get_path('module', 'fetchit7').'/fetchit7.forms.inc');
	$form = drupal_get_form($delta);
	$output = array(
		'subject' => NULL,
		'content' => $form,
	);
	return $output;
}


 /**
  * Implementation of hook_node_info
  * 
  * returns a structured array of the new content types this module is creating
  * created automatically when node_types_rebuild() is called
  * these are just basic node types until additional fields are added (instances) 
  */
function fetchit7_node_info() {
	// the fetchit7 content types
	//   there needs to be code in the fetchit7.install file to create the fields and instances for each of these types
	$fetchit7_content_types = array(
		// the HTML table content type
		'fetchit7_content_table' => array(
			'name'				=> t('fetchit7 HTML table content type'),
			'base'				=> 'node_content', // should this be fetchit7_content_table?
			'description'	=> t('Use this fetchit7 content to create an HTML table connected to a database view/table, optionally with selectable rows'),
			'help'				=> t('Enter all the information necessary to create an HTML table connected to a database server'),
			'custom'			=> FALSE,
			'modified'		=> FALSE,
			'locked'			=> FALSE,
			'disabled'		=> FALSE,
			'has_title'		=> TRUE,
			'title_label'	=> 'Content Title',
			'module'			=> 'fetchit7',
			'orig_type'		=> 'fetchit7_content_table',
		),
		'fetchit7_content_param' => array(
			'name'				=> t('fetchit7 parameter input content type'),
			'base'				=> 'node_content', // should this be fetchit7_content_param?
			'description'	=> t('Use this fetchit7 content to create parameter input/selection forms connected to database views/tables'),
			'help'				=> t('Enter all the information necessary to create a parameter input/selection form connected to a database server'),
			'custom'			=> FALSE,
			'modified'		=> FALSE,
			'locked'			=> FALSE,
			'disabled'		=> FALSE,
			'has_title'		=> TRUE,
			'title_label'	=> 'Content Title',
			'module'			=> 'fetchit7',
			'orig_type'		=> 'fetchit7_content_param',
		),
	);
	
	return $fetchit7_content_types;
}


/**
 * Implements hook_forms().
 * 
 * This function maps form_id's to the form builder function to use to generate it
 * This allows reusing code on different forms,
 * and more importantly for fetchit7, the dynamic generation of form_ids
 * Enables having multiple instances of the same fetchit7 form type on a page.  Yea!
 * See http://drupal.org/node/1970846 for discussion of a similar idea
 */

 function fetchit7_forms($form_id, $args) {

  $forms = array();
	watchdog('fetchit7','fetchit7_forms: '.$form_id);
	// this is just a test form
  if (substr($form_id, 0, 18) == 'fetchit7_xxx_form_') {
    $forms[$form_id] = array('callback' => 'fetchit7_xxx_form');
  }
	// this is the html table form
  if (substr($form_id, 0, 20) == 'fetchit7_table_form_') {
    $forms[$form_id] = array('callback' => 'fetchit7_table_form');
  }
	// this is the parameter input form
  if (substr($form_id, 0, 20) == 'fetchit7_param_form_') {
    $forms[$form_id] = array('callback' => 'fetchit7_param_form');
  }

  return $forms;
}


