<?

/**
 * @file
 * 
 * Schema, install, update, enable and uninstall functions for the fetchit7 module.
 */

/**
 * Implements hook_install()
 * 
 * called after hook_schema 
 * a good place to populate the tables that were created in the hook schema
 * 
 */
 
 function fetchit7_install () {
	watchdog("fetchit7 module","fetchit7_install: populating table fetchit7_content_types");
	// add the fetchit7_content_type records
	$table = 'fetchit7_content_types';
	$record = new stdClass();
	// HTML table
	$record->ndx = 0;
	$record->name = 'fetchit7_html_table';
	$record->title = 'HTML Table';
	$record->enabled = TRUE;
	$record->description = 'these are either plain HTML tables or the new Drupal 7 tableselect elements with selections (radio buttons or checkboxes) in column 1.  Can be used to display a table, select a single record, select multiple records, or delete multiple records.';
	$record->location = 2; // block
	$record->db_host = 'localhost';
	$record->db_type = 0; // pgsql
	$record->db_port = 5432;
	$record->db_name = '';
	$record->db_login = '';
	$record->db_password = '';
	drupal_write_record($table,$record);
	// Google data visualization record
	$record->ndx = 2;
	$record->name = 'fetchit7_gviz';
	$record->title = 'Google Data Visualization';
	$record->enabled = FALSE;
	$record->description = 'Google Data Visualization';
	$record->location = 2; // block
	$record->db_host = 'localhost';
	$record->db_type = 0; // pgsql
	$record->db_port = 5432;
	$record->db_name = '';
	$record->db_login = '';
	$record->db_password = '';
	drupal_write_record($table,$record);
	// parameter input
	$record->ndx = 4;
	$record->name = 'fetchit7_parameter';
	$record->title = 'Parameter Input';
	$record->enabled = FALSE;
	$record->description = 'Parameter Input';
	$record->location = 2; // block
	$record->db_host = 'localhost';
	$record->db_type = 0; // pgsql
	$record->db_port = 5432;
	$record->db_name = '';
	$record->db_login = '';
	$record->db_password = '';
	drupal_write_record($table,$record);
	// append record
	$record->ndx = 7;
	$record->name = 'fetchit7_append';
	$record->title = 'Append Record Form';
	$record->enabled = FALSE;
	$record->description = 'Append Record Form';
	$record->location = 2; // block
	$record->db_host = 'localhost';
	$record->db_type = 0; // pgsql
	$record->db_port = 5432;
	$record->db_name = '';
	$record->db_login = '';
	$record->db_password = '';
	drupal_write_record($table,$record);
	// editable grid
	$record->ndx = 8;
	$record->name = 'fetchit7_editable_grid';
	$record->title = 'Editable HTML Table';
	$record->enabled = FALSE;
	$record->description = 'Editable HTML Table';
	$record->location = 2; // block
	$record->db_host = 'localhost';
	$record->db_type = 0; // pgsql
	$record->db_port = 5432;
	$record->db_name = '';
	$record->db_login = '';
	$record->db_password = '';
	drupal_write_record($table,$record);
	// Open layers map
	$record->ndx = 10;
	$record->name = 'fetchit7_ol_map';
	$record->title = 'Open Layers Map';
	$record->enabled = FALSE;
	$record->description = 'Open Layers Map';
	$record->location = 2; // block
	$record->db_host = 'localhost';
	$record->db_type = 0; // pgsql
	$record->db_port = 5432;
	$record->db_name = '';
	$record->db_login = '';
	$record->db_password = '';
	drupal_write_record($table,$record);

	watchdog("fetchit7 module","fetchit7_install: populating table fetchit7_db_types");
	// add the fetchit7_db_type records
	$table = 'fetchit7_db_types';
	$record = new stdClass();
	$record->ndx = 0;
	$record->name = 'postgresql';
	$record->label = 'PostgreSQL';
	$record->description = 'PostgreSQL relational database system';
	$record->enabled = TRUE;
	drupal_write_record($table,$record);
	$record->ndx = 1;
	$record->name = 'mysql';
	$record->label = 'MySQL';
	$record->description = 'MySQL relational database system';
	$record->enabled = FALSE;
	drupal_write_record($table,$record);
	$record->ndx = 2;
	$record->name = 'sqlserver';
	$record->label = 'SQL Server';
	$record->description = 'Microsoft SQL Server relational database system';
	$record->enabled = FALSE;
	drupal_write_record($table,$record);

	watchdog("fetchit7 module","fetchit7_install: populating table fetchit7_location_types");
	// add the fetchit7_location_type records
	$table = 'fetchit7_location_types';
	$record = new stdClass();
	$record->ndx = 0;
	$record->name = 'notdisplayed';
	$record->label = 'Not displayed';
	$record->description = 'the fetchit7 output is not displayed';
	$record->enabled = TRUE;
	drupal_write_record($table,$record);
	$record->ndx = 1;
	$record->name = 'page';
	$record->label = 'Page';
	$record->description = 'the fetchit7 output is displayed on a page via a menu hook callback';
	$record->enabled = TRUE;
	drupal_write_record($table,$record);
	$record->ndx = 2;
	$record->name = 'block';
	$record->label = 'Block';
	$record->description = 'the fetchit7 output is displayed in a block via the block system view call';
	$record->enabled = TRUE;
	drupal_write_record($table,$record);
	
	// now that the fetchit7 content types table is created and populated
	// create the fetchit7 content types and extend them via fields (fields API)
	//    [note: eventually the fetchit7 content types table will be a custom content type (node type) too and extended via fields like this!!]
	// note that the node_types_rebuild() function causes Drupal 7 to rebuild it's internal node types list
	//   by calling all the hook_node_info functions (including fetchit7_node_info)
	//   and it creates the content types (node types) it finds described there
	//   so the content types (node types) described in fetchit7_node_info will be created by this next line of code
	
	// create base fetchit7 content types
	node_types_rebuild();
	$types = node_type_get_types();
	// add the body field to the various fetchit7 content types
	// TODO: ask Kelly if they really want a body in these types since there is an above/below field (only reason would be to get better HTML WYSIWYG editor in GUI)
	$body_instance = node_add_body_field($types['fetchit7_tbl_content']);
	//$body_instance = node_add_body_field($types['fetchit7_par_content']);
	//$body_instance = node_add_body_field($types['fetchit7_app_content']);
	//$body_instance = node_add_body_field($types['fetchit7_edt_content']);
	//$body_instance = node_add_body_field($types['fetchit7_gvz_content']);
	//$body_instance = node_add_body_field($types['fetchit7_olm_content']);
	// ...
	//
	// here you could modify the body field if you wanted to, such as
	// $body_instance['type'] = 'text_summary_or_trimmed';
	// field_update_instance($body_instance);
	
	//create the various fields to be used by the fetchit7 content types
	foreach (_fetchit7_installed_fields() as $field) {
		field_create_field($field);
	}	
	// link the fields to the appropriate content types via "instances"
	foreach (_fetchit7_installed_instances() as $instance) {
		// add two more parameters to the instance array
		$instance['entity_type'] = 'node';
		$instance['bundle'] = 'fetchit7_tbl_content';
		// then create the instance - i.e. relate the field to a content type (called a bundle)
		field_create_instance($instance);
	}	
		
}


/**
 * function that returns an array of all the fields created by this module 
 */
function _fetchit7_installed_fields () {
	$t = get_t();
	$fetchit7_fields = array(
		'fetchit7_content_enabled' => array(
			'field_name'			=> 'fetchit7_content_enabled',
			'label'						=> $t('content output location'),
			'type'						=> 'list_integer',
			'settings'				=> array (
					'allowed_values'	=> array(
							0	=> 'not displayed',
							1 => 'page',
							2 => 'block',
					),
			),
		),
	);
	
	return $fetchit7_fields;
}


/**
 * function that returns an array of all the field instances created by this module 
 */
function _fetchit7_installed_instances () {
	$t = get_t();
	$fetchit7_instances = array(
		'fetchit2_content_enabled' => array(
			'field_name'		=> 'fetchit7_content_enabled',
			'label'					=> $t('content output location'),
			'type'					=> 'list_integer',
			'widget'				=> array(
				'type'					=> 'options_select',
				'module'				=> 'options',
			),
			'required'			=> TRUE,
			'description'		=> $t('This parameter tells fetchit7 where to display the content: 0 - not displayed, 1 - page content, 2 - block content'),
			'default_value'	=> array(
				0								=> array(
					'value'					=> '2',
				),
			),
		),
	);
	
	return $fetchit7_instances;
}


/**
 * Implements hook_schema
 */
function fetchit7_schema () {	
	// create the fetchit7_contents_type table
	watchdog("fetchit7 module","fetchit7_schema: creating table fetchit7_content_types");
	$schema['fetchit7_content_types'] = array(
	  'description' => 'This static table defines the custom content types that will be available to the fetchit7 module',
	  'fields' => array(
	    'ndx' => array(
	      'description' => 'integer index',
	      'type' => 'int',
	      'not null' => TRUE,
	    ),
	    'name' => array(
	      'description' => 'machine name',
	      'type' => 'varchar',
	      'length' => '60',
	      'not null' => TRUE,
	    ),
	    'title' => array(
	      'description' => 'displayed name',
	      'type' => 'varchar',
	      'length' => '60',
	      'not null' => TRUE,
	    ),
	    'enabled' => array(
	      'description' => 'whether this type is enabled to display',
	      'type' => 'int',
	      'size' => 'tiny',
	      'not null' => TRUE,
	      'default' => 1,
	    ),
	    'description' => array(
	      'description' => 'description of this content type',
	      'type' => 'text',
	      'not null' => TRUE,
	    ),
	    'location' => array(
	      'description' => 'the default content output location to use when creating content of this type; 0 not displayed, 1 page, 2 block; see table fetchit7_location_types',
	      'type' => 'int',
	      'not null' => TRUE,
	      'default' => 2,
	    ),
	    'db_host' => array(
	      'description' => 'the default db server hostname to use when creating content of this type; localhost, etc.',
	      'type' => 'varchar',
	      'length' => '60',
	      'not null' => TRUE,
	      'default' => 'localhost',
	    ),
	    'db_type' => array(
	      'description' => 'the default db type to use when creating content of this type; 0 PostgreSQL, 1 MySQL, 2 SQL Server; see table fetchit7_db_types',
	      'type' => 'int',
	      'not null' => TRUE,
	      'default' => 0,
	    ),
	    'db_port' => array(
	      'description' => 'the default db server port number to use when creating content of this type; 5432 for pg, etc.',
	      'type' => 'int',
	      'not null' => TRUE,
	      'default' => 5432,
	    ),
	    'db_name' => array(
	      'description' => 'the default database name to use when creating content of this type',
	      'type' => 'varchar',
	      'length' => '60',
	      'not null' => TRUE,
	      'default' => 'default_db_name',
	    ),
	    'db_login' => array(
	      'description' => 'the default database login to use when creating content of this type',
	      'type' => 'varchar',
	      'length' => '60',
	      'not null' => TRUE,
	    ),
	    'db_password' => array(
	      'description' => 'the default database login password to use when creating content of this type',
	      'type' => 'varchar',
	      'length' => '60',
	      'not null' => TRUE,
	    ),
	  ),
	  'primary key' => array('ndx'),
	);
	
	watchdog("fetchit7 module","fetchit7_schema: creating table fetchit7_db_types");
	$schema['fetchit7_db_types'] = array(
	  'description' => 'allowable fetchit7 db types',
	  'fields' => array(
	    'ndx' => array(
	      'description' => 'db type integer index 0, 1, 2, ...',
	      'type' => 'int',
	      'not null' => TRUE,
	    ),
	    'name' => array(
	      'description' => 'db type machine name for internal id use',
	      'type' => 'varchar',
	      'length' => '60',
	      'not null' => TRUE,
	    ),
	    'label' => array(
	      'description' => 'db type pretty name for labeling',
	      'type' => 'varchar',
	      'length' => '60',
	      'not null' => TRUE,
	    ),
	    'description' => array(
	      'description' => 'db type verbose description',
	      'type' => 'text',
	      'not null' => TRUE,
	    ),
	    'enabled' => array(
	      'description' => 'db type enabled for use or not',
	      'type' => 'int',
	      'size' => 'tiny',
	      'not null' => TRUE,
	      'default' => 1,
	    ),
	  ),
	  'primary key' => array('ndx'),
	);

	watchdog("fetchit7 module","fetchit7_schema: creating table fetchit7_location_types");
	$schema['fetchit7_location_types'] = array(
	  'description' => 'fetchit7 output location types 0 not displayed, 1 page content, 2 block content',
	  'fields' => array(
	    'ndx' => array(
	      'description' => 'output location integer index 0, 1, 2, ...',
	      'type' => 'int',
	      'not null' => TRUE,
	    ),
	    'name' => array(
	      'description' => 'output location machine name for internal id use',
	      'type' => 'varchar',
	      'length' => '60',
	      'not null' => TRUE,
	    ),
	    'label' => array(
	      'description' => 'output location pretty name for labeling',
	      'type' => 'varchar',
	      'length' => '60',
	      'not null' => TRUE,
	    ),
	    'description' => array(
	      'description' => 'output location verbose description',
	      'type' => 'text',
	      'not null' => TRUE,
	    ),
	    'enabled' => array(
	      'description' => 'output location enabled for use or not',
	      'type' => 'int',
	      'size' => 'tiny',
	      'not null' => TRUE,
	      'default' => 1,
	    ),
	  ),
	  'primary key' => array('ndx'),
	);
	
	return $schema;
}

/**
 * Implements hook_field_schema().
 *
 * Defines the database schema of the field, using the format used by the
 * Schema API.
 *
 * The data we will store here is just one 7-character element, even
 * though the widget presents the three portions separately.
 *
 * All implementations of hook_field_schema() must be in the module's
 * .install file.
 *
 * @see http://drupal.org/node/146939
 * @see schemaapi
 * @see hook_field_schema()
 * @ingroup field_example
 */
//function fetchit7_field_schema($field) {
	// here is an example, the schema is just a structured array defining the columns and any indices of the new "field" - treats it like a table
	//
  // $columns = array(
  //   'rgb' => array('type' => 'varchar', 'length' => 7, 'not null' => FALSE),
  // );
  // $indexes = array(
  //   'rgb' => array('rgb'),
  // );
  // return array(
  //   'columns' => $columns,
  //   'indexes' => $indexes,
  // );
	//
	// so usually the field is just going to be a single column
	//	
//	switch ($field['type']) {
//		case 'enabled': // one of the fields i use
//			$schema = array(
//				'columns' => array(
//						'value'		=> array(
//								'type'			=> 'int',
//								'size'			=> 'medium',
//								'not null'	=> TRUE,
//						),
//				),
//				'indexes' => array(
//						'value'		=> array('value'),
//				),
//			);
//			break;
//		default:
//			
//			break;
//	}
//	
//	return $schema;
//	
//}


/**
 * Implements hook_uninstall()
 */

function fetchit7_uninstall () {
	watchdog("fetchit7 module","fetchit7_uninstall: ");

	// get all the created content for the fetchit7 content types
	$sql = 'SELECT nid FROM {node} n WHERE n.type = :type';
	$result = db_query($sql, array(':type' => 'fetchit7_tbl_content'));
	$nids = array();
	foreach ($result as $row) {
		$nids[] = $row->nid;
	}
	
	// delete these nodes
	node_delete_multiple($nids);
	
	// loop over the fetchit7 fields and delete their instances, data and the fields themselves
	foreach (array_keys(_fetchit7_installed_fields()) as $field) {
		field_delete_field($field);
	}
	
	// loop over any remaining field instances attached to the content types (like the body field)
	//   and delete them individually
	$instances = field_info_instances('node','fetchit7_tbl_content');
	foreach ($instances as $instance_name => $instance) {
		field_delete_instance($instance);
	}
	
	// delete the content types
	node_type_delete('fetchit7_tbl_content');
	
	// purge all field information
	field_purge_batch(1000);

}


/**
 * Implements hook_enable()
 */

function fetchit7_enable () {
	watchdog("fetchit7 module","fetchit7_enable: ");
}